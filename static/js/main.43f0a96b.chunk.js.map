{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["randomNumberGenerator","seedGenerator","address","blockHash","cryptojs","Hex","parse","toString","hashed","hash","Buffer","from","cursor","byteLength","hashing","slice","reduce","sum","byte","index","add","Decimal","dividedBy","toNumber","rollNumbers","numbers","possible","generator","results","length","number","next","value","result","times","trunc","includes","push","sort","App","useState","typeRoll","setTypeRoll","inputString","setInputString","onChangeInput","useCallback","e","target","name","setResult","getResult","a","seed","handleTypeRoll","Wrap","className","onChange","onClick","id","type","checked","htmlFor","href","styled","div","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43f0a96b.chunk.js","sourcesContent":["// import { HmacSHA256, enc } from \"crypto-js\";\nimport * as cryptojs from \"crypto-js\";\nimport Decimal from \"decimal.js\";\nimport React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst seedGenerator = (address: string, blockHash: string): string => {\n  const hmac = cryptojs.HmacSHA256(cryptojs.enc.Hex.parse(address), blockHash);\n  // const hmac = HmacSHA256(enc.Hex.parse(address), txid);\n  return hmac.toString(cryptojs.enc.Hex);\n}\n\nfunction* randomNumberGenerator(hashed: string): Generator<number> {\n  while (true) {\n    const hash = Buffer.from(hashed, 'hex')\n    let cursor = 0\n\n    while (cursor < hash.byteLength / 3) {\n      const hashing = hash\n        .slice(cursor * 3, ++cursor * 3)\n        .reduce(\n          (sum, byte, index) =>\n            sum.add(new Decimal(byte).dividedBy(256 ** (index + 1))),\n          new Decimal(0)\n        ).toNumber();\n      yield hashing\n    }\n    cursor = 0;\n  }\n}\n\nconst rollNumbers = (hashed: string, numbers: number, possible: number): number[] => {\n  const generator = randomNumberGenerator(hashed)\n\n  const results: number[] = []\n\n  while (results.length < numbers) {\n    const number = generator.next().value\n\n    const result = new Decimal(number).times(possible).trunc().toNumber()\n\n    if (!results.includes(result)) results.push(result)\n  }\n\n  return results.sort()\n}\n\nconst getLumiResult = (direction: number, hashed: string): number => direction === 0 ? rollNumbers(hashed, 1, 100)[0] : 99 - rollNumbers(hashed, 1, 100)[0]\n\nconst App = () => {\n  const [typeRoll, setTypeRoll] = useState<0 | 1>(0) //0:under, 1:over\n  const [inputString, setInputString] = useState({\n    address: '',\n    blockHash: ''\n  })\n  const { address, blockHash } = inputString\n\n  const onChangeInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputString({ ...inputString, [e.target.name]: e.target.value })\n  }, [inputString])\n  const [result, setResult] = useState(0)\n  const getResult = async () => {\n    const seed = await seedGenerator(address, blockHash)\n    const result = await getLumiResult(typeRoll, seed)\n    setResult(result)\n  }\n  const handleTypeRoll = useCallback((e: 0 | 1) => {\n    setTypeRoll(e)\n  }, [typeRoll])\n  return (\n    <Wrap>\n      <div className=\"ctx-input\">\n        <label>Address:</label>\n        <input value={address} name=\"address\" onChange={onChangeInput} />\n      </div>\n      <div className=\"ctx-input\">\n        <label>Block Hash:</label>\n        <input value={blockHash} name=\"blockHash\" onChange={onChangeInput} />\n      </div>\n      <div className=\"ctx-check\">\n        <div className=\"check\" onClick={() => handleTypeRoll(0)}>\n          <input id=\"under\" type=\"radio\" checked={typeRoll === 0} value={0} name=\"blockHash\" />\n          <label htmlFor=\"age1\">Under</label><br></br>\n        </div>\n        <div className=\"check\" onClick={() => handleTypeRoll(1)}>\n          <input id=\"over\" type=\"radio\" checked={typeRoll === 1} value={1} name=\"blockHash\" />\n          <label htmlFor=\"age1\">Over</label><br></br>\n        </div>\n\n      </div>\n      <div className=\"ctx-button\">\n        <button onClick={getResult}>\n          Get Result\n        </button>\n      </div>\n      <div className=\"ctx-result\">\n        <p>Result: {result}</p>\n      </div>\n      <div className=\"ctx-repo\">\n        <p>Link repo: <a href=\"https://github.com/LongTran12/lumi-fairness\" >Github</a></p>\n      </div>\n    </Wrap>\n  )\n\n}\nexport default App\nconst Wrap = styled.div`\n    width: clamp(300px,400px,500px);\n    margin: 0 auto;\n    height: 100%;\n    margin-top: 50px;\n    .ctx-input{\n        margin-bottom: 20px;\n        display: flex;\n        flex-direction: column;\n        label{\n            margin-bottom: 5px;\n        }\n        input{\n            /* font-size: 20px; */\n            padding:7px 5px;\n            width: 100%;\n            \n        }\n    }\n    .ctx-check{\n        display: flex;\n        align-content: center;\n        justify-content: center;\n        margin-bottom: 20px;\n        label{\n            margin-right: 30px;\n        }\n    }\n    .ctx-button{\n        text-align: center;\n        button{\n            padding:10px 25px;\n        }  \n    }\n    .ctx-result{\n        text-align: center;\n        p{\n            font-size: 30px;\n            font-weight: bold;\n        }\n    }\n    .ctx-repo{\n      text-align: center;\n    }\n`\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}